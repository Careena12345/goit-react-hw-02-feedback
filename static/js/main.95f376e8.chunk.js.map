{"version":3,"sources":["components/FeedbackOptions.js","components/Statistics.js","components/Section.js","App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","options","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","clientFeedback","state","handleFeedback","feedback","setState","prevState","props","step","TotalFeedback","countPositiveFeedbackPercentage","positive","totalV","Math","round","this","totalPrec","console","log","Object","keys","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"2NAwBeA,EArBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,QAApB,OACtB,oCACE,iCACE,4BAAQC,KAAK,SAASC,QAAS,kBAAMH,EAAgBC,EAAQ,MAA7D,QAGA,4BAAQC,KAAK,SAASC,QAAS,kBAAMH,EAAgBC,EAAQ,MAA7D,WAGA,4BAAQC,KAAK,SAASC,QAAS,kBAAMH,EAAgBC,EAAQ,MAA7D,UCcSG,EAvBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,0CACCD,EAAQ,GACP,4BACE,oCAAUH,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBH,GAAQI,MCGxBC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICDgBC,E,4MACnBC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAKPQ,eAAiB,SAAAC,GACf,EAAKC,UAAS,SAACC,EAAWC,GACxB,OAAO,eACJH,EAAWE,EAAUF,GAAYG,EAAMC,U,EAK9CC,cAAgB,kBACd,EAAKP,MAAL,KAAqB,EAAKA,MAAL,QAAwB,EAAKA,MAAL,K,EAE/CQ,gCAAkC,SAACC,EAAUC,GAC3C,OAAOC,KAAKC,MAAOH,EAAWC,EAAU,KAAO,M,uDAI/C,IAAMhB,EAAQmB,KAAKN,gBACbO,EAAYD,KAAKL,gCACrBK,KAAKb,MAAL,KACAN,GAIF,OAFAqB,QAAQC,IAAItB,GAGV,6BACE,kBAAC,EAAD,CAASG,MAAO,yBACd,kBAAC,EAAD,CACEV,QAAS8B,OAAOC,KAAKL,KAAKb,OAC1Bd,gBAAiB2B,KAAKZ,iBAExB,kBAAC,EAAD,CACEV,KAAMsB,KAAKb,MAAL,KACNR,QAASqB,KAAKb,MAAL,QACTP,IAAKoB,KAAKb,MAAL,IACLN,MAAOA,EACPC,mBAAoBmB,U,GA5CYK,aAAvBpB,EAMZqB,aAAe,CAAEd,KAAM,GCPhCe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.95f376e8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback, options }) => (\r\n  <>\r\n    <section>\r\n      <button type=\"button\" onClick={() => onLeaveFeedback(options[0])}>\r\n        Good\r\n      </button>\r\n      <button type=\"button\" onClick={() => onLeaveFeedback(options[1])}>\r\n        Neutral\r\n      </button>\r\n      <button type=\"button\" onClick={() => onLeaveFeedback(options[2])}>\r\n        Bad\r\n      </button>\r\n    </section>\r\n  </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired)\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    <h3>Statistics</h3>\r\n    {total > 0 && (\r\n      <ul>\r\n        <li>Good:{good}</li>\r\n        <li>Neutral:{neutral}</li>\r\n        <li>Bad:{bad}</li>\r\n        <li>Total:{total}</li>\r\n        <li>Positive Feedback:{good && positivePercentage}</li>\r\n      </ul>\r\n    )}\r\n  </>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Section;\r\n","import React, { Component } from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Section from \"./components/Section\";\n\nexport default class clientFeedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n  static defaultProps = { step: 1 };\n  static propTypes = {};\n\n  handleFeedback = feedback => {\n    this.setState((prevState, props) => {\n      return {\n        [feedback]: prevState[feedback] + props.step\n      };\n    });\n  };\n\n  TotalFeedback = () =>\n    this.state[\"good\"] + this.state[\"neutral\"] + this.state[\"bad\"];\n\n  countPositiveFeedbackPercentage = (positive, totalV) => {\n    return Math.round((positive / totalV) * 100) + \" %\";\n  };\n\n  render() {\n    const total = this.TotalFeedback();\n    const totalPrec = this.countPositiveFeedbackPercentage(\n      this.state[\"good\"],\n      total\n    );\n    console.log(total);\n\n    return (\n      <div>\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleFeedback}\n          />\n          <Statistics\n            good={this.state[\"good\"]}\n            neutral={this.state[\"neutral\"]}\n            bad={this.state[\"bad\"]}\n            total={total}\n            positivePercentage={totalPrec}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}